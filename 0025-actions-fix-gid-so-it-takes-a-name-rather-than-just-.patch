From 90f1ce35b03601b889fc57c9683aa040ab4dbc2d Mon Sep 17 00:00:00 2001
From: Phillip Lougher <phillip@squashfs.org.uk>
Date: Sun, 3 Aug 2014 05:54:07 +0100
Subject: [PATCH 025/120] actions: fix gid() so it takes a name rather than
 just a number

The gid() test operation was added at the same time as all the other
inode attribute test operators, and all these operations were implemented
taking a [+-]number as an argument.

This is obviously wrong for GIDs.  GIDs should be able to be specified
as a name as well as a [+-]number.

Signed-off-by: Phillip Lougher <phillip@squashfs.org.uk>
---
 squashfs-tools/action.c | 49 ++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 46 insertions(+), 3 deletions(-)

diff --git a/squashfs-tools/action.c b/squashfs-tools/action.c
index 7e6c8c0..c624905 100644
--- a/squashfs-tools/action.c
+++ b/squashfs-tools/action.c
@@ -2046,8 +2046,6 @@ TEST_VAR_FN(dirblocks, ACTION_DIR, action_data->buf->st_blocks)
 
 TEST_VAR_FN(blocks, ACTION_ALL_LNK, action_data->buf->st_blocks)
 
-TEST_VAR_FN(gid, ACTION_ALL_LNK, action_data->buf->st_gid)
-
 TEST_VAR_FN(depth, ACTION_ALL_LNK, action_data->depth)
 
 TEST_VAR_RANGE_FN(filesize, ACTION_REG, action_data->buf->st_size)
@@ -2118,6 +2116,51 @@ static int parse_uid_arg(struct test_entry *test, struct atom *atom)
 
 
 /*
+ * gid specific test code
+ */
+TEST_VAR_FN(gid, ACTION_ALL_LNK, action_data->buf->st_gid)
+
+static int parse_gid_arg(struct test_entry *test, struct atom *atom)
+{
+	struct test_number_arg *number;
+	long long size;
+	int range;
+	char *error;
+
+	if(parse_number(atom->argv[0], &size, &range, &error)) {
+		/* managed to fully parse argument as a number */
+		if(size < 0 || size > (((long long) 1 << 32) - 1)) {
+			TEST_SYNTAX_ERROR(test, 1, "Numeric gid out of "
+								"range\n");
+			return 0;
+		}
+	} else {
+		/* couldn't parse (fully) as a number, is it a group name? */
+		struct group *gid = getgrnam(atom->argv[0]);
+		if(gid) {
+			size = gid->gr_gid;
+			range = NUM_EQ;
+		} else {
+			TEST_SYNTAX_ERROR(test, 1, "Invalid gid or unknown "
+								"group\n");
+			return 0;
+		}
+	}
+
+	number = malloc(sizeof(*number));
+	if(number == NULL)
+		MEM_ERROR();
+
+	number->range = range;
+	number->size= size;
+
+	atom->data = number;
+
+	return 1;
+}
+
+
+/*
  * Type test specific code
  */
 struct type_entry type_table[] = {
@@ -2657,7 +2700,7 @@ static struct test_entry test_table[] = {
 	{ "fileblocks", 1, fileblocks_fn, parse_number_arg, 1},
 	{ "dirblocks", 1, dirblocks_fn, parse_number_arg, 1},
 	{ "blocks", 1, blocks_fn, parse_number_arg, 1},
-	{ "gid", 1, gid_fn, parse_number_arg, 1},
+	{ "gid", 1, gid_fn, parse_gid_arg, 1},
 	{ "uid", 1, uid_fn, parse_uid_arg, 1},
 	{ "depth", 1, depth_fn, parse_number_arg, 1},
 	{ "filesize_range", 2, filesize_range_fn, parse_range_args, 1},
-- 
2.8.3

