From 37e8556d62af6ef4edd07d48eb1caba19f49fcc1 Mon Sep 17 00:00:00 2001
From: Phillip Lougher <phillip@squashfs.org.uk>
Date: Mon, 11 Aug 2014 01:23:14 +0100
Subject: [PATCH 060/120] action: in eval_XXX_action() functions strdup
 (sub-)pathname

The strings that are passed back by the (sub-)pathname
functions are over-written every time another call is
made to these functions.  This is deliberate to avoid
allocating and freeing the strings everytime on functions
which are called frequently, *and* the returned value is
only needed temporarily.  Only rarely is the string kept
long term and then the principle is the string should be
strdupped then.

The action usage of these string values without strdupping
has always been a bit edgy - on the one hand the action code
does *not* call back into the Mksquashfs mainloop which is
where the additional use of (sub-)pathname is expected to be,
on the other hand such long term reliance on strings not
being reused is prone to break with code changes.

Such a thing has happened here in the actions code - we have
introduced a new "follow_link()" test function which needs
to compute it's own action_data structure using, you guessed it,
(sub-)pathname.

So the actions code can now call (sub-)pathname whilst relying
on the previous value.  So, we need to strdup and free it.

Signed-off-by: Phillip Lougher <phillip@squashfs.org.uk>
---
 squashfs-tools/action.c | 46 ++++++++++++++++++++++++++++++++--------------
 1 file changed, 32 insertions(+), 14 deletions(-)

diff --git a/squashfs-tools/action.c b/squashfs-tools/action.c
index ed1601e..484ea13 100644
--- a/squashfs-tools/action.c
+++ b/squashfs-tools/action.c
@@ -675,8 +675,8 @@ void eval_actions(struct dir_info *root, struct dir_ent *dir_ent)
 	int st_mode = dir_ent->inode->buf.st_mode;
 
 	action_data.name = dir_ent->name;
-	action_data.pathname = pathname(dir_ent);
-	action_data.subpath = subpathname(dir_ent);
+	action_data.pathname = strdup(pathname(dir_ent));
+	action_data.subpath = strdup(subpathname(dir_ent));
 	action_data.buf = &dir_ent->inode->buf;
 	action_data.depth = dir_ent->our_dir->depth;
 	action_data.dir_ent = dir_ent;
@@ -694,6 +694,9 @@ void eval_actions(struct dir_info *root, struct dir_ent *dir_ent)
 		if (match)
 			action->action->run_action(action, dir_ent);
 	}
+
+	free(action_data.pathname);
+	free(action_data.subpath);
 }
 
 
@@ -706,8 +709,8 @@ void *eval_frag_actions(struct dir_info *root, struct dir_ent *dir_ent)
 	struct action_data action_data;
 
 	action_data.name = dir_ent->name;
-	action_data.pathname = pathname(dir_ent);
-	action_data.subpath = subpathname(dir_ent);
+	action_data.pathname = strdup(pathname(dir_ent));
+	action_data.subpath = strdup(subpathname(dir_ent));
 	action_data.buf = &dir_ent->inode->buf;
 	action_data.depth = dir_ent->our_dir->depth;
 	action_data.dir_ent = dir_ent;
@@ -715,10 +718,15 @@ void *eval_frag_actions(struct dir_info *root, struct dir_ent *dir_ent)
 
 	for (i = 0; i < fragment_count; i++) {
 		match = eval_expr(fragment_spec[i].expr, &action_data);
-		if (match)
+		if (match) {
+			free(action_data.pathname);
+			free(action_data.subpath);
 			return &fragment_spec[i].data;
+		}
 	}
 
+	free(action_data.pathname);
+	free(action_data.subpath);
 	return &def_fragment;
 }
 
@@ -1281,8 +1289,8 @@ int eval_empty_actions(struct dir_info *root, struct dir_ent *dir_ent)
 		return 0;
 
 	action_data.name = dir_ent->name;
-	action_data.pathname = pathname(dir_ent);
-	action_data.subpath = subpathname(dir_ent);
+	action_data.pathname = strdup(pathname(dir_ent));
+	action_data.subpath = strdup(subpathname(dir_ent));
 	action_data.buf = &dir_ent->inode->buf;
 	action_data.depth = dir_ent->our_dir->depth;
 	action_data.dir_ent = dir_ent;
@@ -1312,6 +1320,9 @@ int eval_empty_actions(struct dir_info *root, struct dir_ent *dir_ent)
 		match = eval_expr(empty_spec[i].expr, &action_data);
 	}
 
+	free(action_data.pathname);
+	free(action_data.subpath);
+
 	return match;
 }
 
@@ -1522,8 +1533,8 @@ void eval_move_actions(struct dir_info *root, struct dir_ent *dir_ent)
 	struct move_ent *move = NULL;
 
 	action_data.name = dir_ent->name;
-	action_data.pathname = pathname(dir_ent);
-	action_data.subpath = subpathname(dir_ent);
+	action_data.pathname = strdup(pathname(dir_ent));
+	action_data.subpath = strdup(subpathname(dir_ent));
 	action_data.buf = &dir_ent->inode->buf;
 	action_data.depth = dir_ent->our_dir->depth;
 	action_data.dir_ent = dir_ent;
@@ -1567,7 +1578,7 @@ void eval_move_actions(struct dir_info *root, struct dir_ent *dir_ent)
 		 */
 		if(move->ops == 0) {
 			free(move);
-			return;
+			goto finish;
 		}
 
 		dest = (move->ops & ACTION_MOVE_MOVE) ?
@@ -1582,7 +1593,7 @@ void eval_move_actions(struct dir_info *root, struct dir_ent *dir_ent)
 				action_data.subpath, conf_path);
 			free(conf_path);
 			free(move);
-			return;
+			goto finish;
 		}
 
 		/*
@@ -1596,11 +1607,15 @@ void eval_move_actions(struct dir_info *root, struct dir_ent *dir_ent)
 				action_data.subpath, conf_path);
 			free(conf_path);
 			free(move);
-			return;
+			goto finish;
 		}
 		move->next = move_list;
 		move_list = move;
 	}
+
+finish:
+	free(action_data.pathname);
+	free(action_data.subpath);
 }
 
 
@@ -1742,8 +1757,8 @@ int eval_prune_actions(struct dir_info *root, struct dir_ent *dir_ent)
 	struct action_data action_data;
 
 	action_data.name = dir_ent->name;
-	action_data.pathname = pathname(dir_ent);
-	action_data.subpath = subpathname(dir_ent);
+	action_data.pathname = strdup(pathname(dir_ent));
+	action_data.subpath = strdup(subpathname(dir_ent));
 	action_data.buf = &dir_ent->inode->buf;
 	action_data.depth = dir_ent->our_dir->depth;
 	action_data.dir_ent = dir_ent;
@@ -1752,6 +1767,9 @@ int eval_prune_actions(struct dir_info *root, struct dir_ent *dir_ent)
 	for (i = 0; i < prune_count && !match; i++)
 		match = eval_expr(prune_spec[i].expr, &action_data);
 
+	free(action_data.pathname);
+	free(action_data.subpath);
+
 	return match;
 }
 
-- 
2.8.3

